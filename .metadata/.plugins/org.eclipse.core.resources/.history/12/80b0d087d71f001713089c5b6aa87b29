package org.disastermanagement_lab6;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

import android.os.AsyncTask;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.util.EntityUtils;
import org.disastermanagement_lab6.R;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.google.android.gms.maps.CameraUpdate;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.LatLngBounds;
import com.google.android.gms.maps.model.MarkerOptions;

public class AsyncHttpPost extends AsyncTask<String, Void, JSONArray> {
  private HashMap<String, String> mData;// post data
  private GoogleMap mMap;

  public AsyncHttpPost(HashMap<String, String> data, GoogleMap map) {
      mData = data;
      mMap = map;
  }

  @Override
  protected JSONArray doInBackground(String... params) {
      JSONArray arr = null;
      HttpClient client = new DefaultHttpClient();
      
      try {
          HttpPost post = new HttpPost(params[0]);// in this case, params[0] is URL
        
          // set up post data
          ArrayList<NameValuePair> nameValuePair = new ArrayList<NameValuePair>();
          Iterator<String> it = mData.keySet().iterator();
          while (it.hasNext()) {
              String key = it.next();
              nameValuePair.add(new BasicNameValuePair(key, mData.get(key)));
          }
          post.setEntity(new UrlEncodedFormEntity(nameValuePair, "UTF-8"));
          
          HttpResponse response = client.execute(post);

          byte[] result = EntityUtils.toByteArray(response.getEntity());
          String str = new String(result, "UTF-8");
          arr = new JSONArray(str);
      }
      catch (UnsupportedEncodingException e) {
        android.util.Log.v("INFO", e.toString());
      }
      catch (Exception e) {
        android.util.Log.v("INFO", e.toString());
      }
      return arr;
  }

  @Override
  protected void onPostExecute(JSONArray Result) {
    if (mData.get("tab_id").equalsIgnoreCase("1")) {
      onQueryReportExecute(Result);
    }
  }
  
  
  protected BitmapDescriptor setMapMarker(String report_type) {
	  if (report_type.equals("donation")) {
		  return BitmapDescriptorFactory.fromResource(R.drawable.donation_icon);
	  } else if (report_type.equals("damage")) {
		  return BitmapDescriptorFactory.fromResource(R.drawable.damage_icon);
	  } else if (report_type.equals("request")) {
		  return BitmapDescriptorFactory.fromResource(R.drawable.request_icon);
	  } else {
		  return BitmapDescriptorFactory.fromResource(R.drawable.map_marker);
	  }
  }
  
  protected String setSnippet(String report_type, JSONObject report) { 
	  try{
		  if (report_type.equals("donation")) {
			  return "donate resource: " + report.getString("resource_type");
		  } else if (report_type.equals("damage")) {
			  return "report damage: " + report.getString("damage_type");
		  } else if (report_type.equals("request")) {
			  return "request resource: " + report.getString("resource_type");
		  } 
	  } catch (JSONException e) {
		  return "Missing";
	  }
	return "Missing";
  }
  
  private void onQueryReportExecute(JSONArray Result) {
	mMap.clear();//add this to clear the existing markers
    LatLngBounds.Builder builder = new LatLngBounds.Builder();

    for (int i = 0 ; i < Result.length(); i++) {
      try {
        JSONObject report = Result.getJSONObject(i);
        Double lng = Double.parseDouble(report.getString("longitude"));
        Double lat = Double.parseDouble(report.getString("latitude"));
        LatLng latlng = new LatLng(lat, lng);
        builder.include(latlng);
        
        String report_string = report.getString("report_type");
        // icon(BitmapDescriptorFactory.fromResource(setMapMarker(report_string)))
        mMap.addMarker(new MarkerOptions().position(latlng)
             .title(report.getString("disaster").toUpperCase())
             .icon(setMapMarker(report_string))
             .snippet(setSnippet(report_string, report))
        );
        
      } catch (JSONException e) {
        android.util.Log.v("INFO", e.toString());
      }
    }
    
    if (Result.length() > 0) {
      LatLngBounds bounds = builder.build();
    
      int padding = 0; // offset from edges of the map in pixels
      CameraUpdate cu = CameraUpdateFactory.newLatLngBounds(bounds, padding);
    
      mMap.moveCamera(cu);
    }
  }
}